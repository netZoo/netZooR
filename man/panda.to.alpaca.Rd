% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/panda.to.alpaca.R
\name{panda.to.alpaca}
\alias{panda.to.alpaca}
\title{Use two PANDA network to generate an ALPACA result}
\usage{
panda.to.alpaca(panda.net1, panda.net2, file.stem = NULL, verbose = F)
}
\arguments{
\item{panda.net1}{data.frame indicating an complete network of one condition generated by \code{\link{panda.py}}}

\item{panda.net2}{data.frame indicating an complete network of another condition generated by \code{\link{panda.py}}}

\item{file.stem}{String indicating the folder path and prefix of result files, where all results will be stored. The default value is NULL.}

\item{verbose}{Boolean vector indicating whether the full differential modularity matrix should also be written to a file. The default value is 'FALSE'.}
}
\value{
A string message showing the location of output file if file.stem is given, 
and a List where the first element is the membership vector and second element is the contribution score of each node to its module's total differential modularity
}
\description{
\strong{ALPACA}(ALtered Partitions Across Community Architectures) is a method for comparing two genome-scale networks derived from different phenotypic states to identify condition-specific modules.
\href{https://www.nature.com/articles/s41540-018-0052-5}{[(Padi and Quackenbush 2018)])}
This function compares two networks generate by \code{\link{panda.py}} in this package and finds the sets of nodes that best characterize the change in modular structure.
}
\examples{
# refer to four input datasets files in inst/extdat
treated_expression_file_path <- system.file("extdata", "expr4_matched.txt", 
package = "netZooR", mustWork = TRUE)
control_expression_file_path <- system.file("extdata", "expr10_matched.txt", 
package = "netZooR", mustWork = TRUE)
motif_file_path <- system.file("extdata", "chip_matched.txt", package = "netZooR", mustWork = TRUE)
ppi_file_path <- system.file("extdata", "ppi_matched.txt", package = "netZooR", mustWork = TRUE)


# Run PANDA for treated and control network
treated_panda_net <- panda.py(expr_file = treated_expression_file_path, 
motif_file = motif_file_path, ppi_file = ppi_file_path, 
modeProcess="legacy", remove_missing = TRUE )$panda
control_panda_net <- panda.py(expr_file = control_expression_file_path, 
motif_file = motif_file_path, ppi_file = ppi_file_path, 
modeProcess="legacy", remove_missing = TRUE )$panda
 
# Run ALPACA
alpaca<- panda.to.alpaca(treated_panda_net, control_panda_net, "./TB", verbose=TRUE)

}
